name: validate
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  unity-build:
    env:
      UNITY_PROJECT_PATH: '' # set by unity-setup action
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        unity-versions: [2021.x, 2022.x, 6000.x]
        build-target: [StandaloneOSX, iOS]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: RageAgainstThePixel/com.utilities.encoder.wav
      - uses: RageAgainstThePixel/unity-setup@v1
        with:
          unity-version: ${{ matrix.unity-versions }}
          build-targets: ${{ matrix.build-target }}
      - uses: RageAgainstThePixel/activate-unity-license@v1
        with:
          license: 'Personal'
          username: ${{ secrets.UNITY_USERNAME }}
          password: ${{ secrets.UNITY_PASSWORD }}
      - uses: RageAgainstThePixel/unity-action@v1
        name: '${{ matrix.build-target }}-Validate'
        with:
          log-name: '${{ matrix.build-target }}-Validate'
          args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject -importTMProEssentialsAsset'
      - uses: RageAgainstThePixel/unity-action@v1
        name: '${{ matrix.build-target }}-Test'
        with:
          log-name: '${{ matrix.build-target }}-Test'
          build-target: ${{ matrix.build-target }}
          args: '-nographics -batchmode -runTests -testPlatform EditMode -testResults "${{ github.workspace }}/Logs/${{ matrix.build-target }}-results.xml"'
      - uses: RageAgainstThePixel/unity-action@v1
        name: '${{ matrix.build-target }}-Build'
        with:
          log-name: '${{ matrix.build-target }}-Build'
          args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild -export'
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          compression-level: 0
          retention-days: 1
          name: '${{ github.run_number }}.${{ github.run_attempt }}-${{ matrix.os }}-${{ matrix.unity-versions }}-${{ matrix.build-target }}-Artifacts'
          path: |
            ${{ github.workspace }}/**/*.log
            ${{ github.workspace }}/**/*.xml
            ${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/**/*
            !${{ env.UNITY_PROJECT_PATH }}/Library/**/*
            !/**/*_BackUpThisFolder_ButDontShipItWithYourGame/**
            !/**/*_BurstDebugInformation_DoNotShip/**

      - uses: ./action.yml # RageAgainstThePixel/unity-xcode-builder
        id: xcode-build
        with:
          project-path: ${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/**/*.xcodeproj
          apple-id: ${{ secrets.APPLE_ID }}
          apple-password: ${{ secrets.APPLE_PASSWORD }}
          certificate: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}

      - name: print outputs
        run: |
          echo "Archive: ${{ steps.xcode-build.outputs.archive }}"
          echo "Executable: ${{ steps.xcode-build.outputs.executable }}"
