name: validate
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  unity-build:
    name: '(${{ matrix.unity-version }}) ${{ matrix.build-target }}'
    env:
      TEMPLATE_PATH: ''
      UNITY_PROJECT_PATH: '' # set by unity-setup action
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-15]
        unity-version: [2021.x, 2022.x, 6000.x]
        build-target:
          - iOS
          - StandaloneOSX
          - VisionOS
        exclude:
          - os: macos-15
            unity-version: 2021.x
            build-target: VisionOS
    steps:
      - uses: actions/checkout@v4
      - run: 'npm install -g openupm-cli'
        # Installs the Unity Editor based on your project version text file
        # sets -> env.UNITY_EDITOR_PATH
        # sets -> env.UNITY_PROJECT_PATH
      - uses: RageAgainstThePixel/unity-setup@v1
        with:
          version-file: 'None'
          build-targets: ${{ matrix.build-target }}
          unity-version: ${{ matrix.unity-version }}
      - name: Find Unity Template Path
        run: |
          $rootPath = $env:UNITY_EDITOR_PATH -replace "Editor.*", ""
          Write-Host "ROOT_PATH=$rootPath"
          $templatePath = Get-ChildItem -Recurse -Filter "com.unity.template.3d*.tgz" -Path $rootPath | Select-Object -First 1 | Select-Object -ExpandProperty FullName
          Write-Host "TEMPLATE_PATH=$templatePath"
          echo "TEMPLATE_PATH=$templatePath" >> $env:GITHUB_ENV
          $projectPath = "${{ github.workspace }}/UnityProject"
          echo "UNITY_PROJECT_PATH=$projectPath" >> $env:GITHUB_ENV
        shell: pwsh
        # Activates the installation with the provided credentials
      - uses: RageAgainstThePixel/activate-unity-license@v1
        if: ${{ matrix.build-target == 'VisionOS' }}
        with:
          license: 'Professional'
          username: ${{ secrets.UNITY_USERNAME }}
          password: ${{ secrets.UNITY_PASSWORD }}
          serial: ${{ secrets.UNITY_SERIAL }}
      - uses: buildalon/activate-unity-license@v1
        if: ${{ matrix.build-target != 'VisionOS' }}
        with:
          license: 'Personal'
          username: ${{ secrets.UNITY_USERNAME }}
          password: ${{ secrets.UNITY_PASSWORD }}
      - uses: RageAgainstThePixel/unity-action@v1
        name: Create Test Project
        with:
          log-name: 'create-test-project'
          args: '-quit -nographics -batchmode -createProject "${{ github.workspace }}/UnityProject" -cloneFromTemplate "${{ env.TEMPLATE_PATH }}"'
      - run: 'openupm add com.utilities.buildpipeline'
        name: Add Build Pipeline Package
        working-directory: ${{ github.workspace }}/UnityProject
      - uses: RageAgainstThePixel/unity-action@v1
        name: '${{ matrix.build-target }}-Validate'
        with:
          build-target: ${{ matrix.build-target }}
          log-name: '${{ matrix.build-target }}-Validate'
          args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject -importTMProEssentialsAsset'
      - uses: RageAgainstThePixel/unity-action@v1
        name: '${{ matrix.build-target }}-Build'
        with:
          build-target: ${{ matrix.build-target }}
          log-name: '${{ matrix.build-target }}-Build'
          args: '-quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild -sceneList Assets/Scenes/SampleScene.unity -export -enableAppleAutomaticSigning -bundleIdentifier com.rageagainstthepixel.xcode'
      - uses: ./ # RageAgainstThePixel/unity-xcode-builder
        id: xcode-build
        with:
          project-path: ${{ env.UNITY_PROJECT_PATH }}/Builds/${{ matrix.build-target }}/**/*.xcodeproj
          app-store-connect-key: ${{ secrets.APP_STORE_CONNECT_KEY }}
          app-store-connect-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          app-store-connect-issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          team-id: ${{ secrets.APPLE_TEAM_ID }}
          export-option: app-store
          upload: ${{ matrix.unity-version == '2022.x' }}
      - name: print outputs
        if: always()
        run: |
          echo "Executable: ${{ steps.xcode-build.outputs.executable }}"
          echo "Output Directory: ${{ steps.xcode-build.outputs.output-directory }}"
          ls -R "${{ steps.xcode-build.outputs.output-directory }}"
